import logging
import threading
import time
import math

class ZeroDException:
    pass

structure = "%(asctime)s: %(message)s"
logging.basicConfig(level=logging.INFO, datefmt="%d.%m.%Y %H:%M:%S", format=structure)

def thread_sqrt_function(name, a, b, c):
    logging.info("Thread %s: start", name)
    time.sleep(1.5)
    d = (b ** 2) - (4 * a * c)
    logging.info(f"Thread {name}: numbers: a={a}, b={b}, c={c}")
    x1 = (-b + math.sqrt(d)) / (2 * a)
    x2 = (-b - math.sqrt(d)) / (2 * a)
    logging.info(f"Thread {name}, {d}")
    if int(d) >= 0:
        answer = math.sqrt(int(d))
        print("The square root of {} is {}.".format(d, answer))
        logging.info(f"Thread {name}, x1 = {x1}, x2 = {x2}")
    elif d == 0:
        x = -b / (2 * a)
        logging.info(f"Thread {name}, x = {x}")
    else:
        print("You cannot find the square root of a number less than 0.")
    time.sleep(1.5)
    logging.info("Thread %s: finish", name)


the_first_action = threading.Thread(target=thread_sqrt_function, args=(1, 12, 8, -10))
the_second_action = threading.Thread(target=thread_sqrt_function, args=(2, 7, 8, -12))

the_first_action.start()
the_second_action.start()
